1. Имеется два больших репозитория:

platform/sdk -- Wizard (https://android.googlesource.com/platform/sdk)
platform/tools/base -- Library assets-studio (https://android.googlesource.com/platform/tools/base)

Ветка studio-1.1-release и studio-1.1-release на обоих.

2. Из platform/tools/base вычленяем библиотеку assets-studio.

3. Создаём Swing/AWT-проект, подглядывая в platform/sdk.

assetstudio/CreateAssetSetWizardState.java
assetstudio/ConfigureAssetSetPage.java
wizards/templates/TemplateMetadata.java
wizards/templates/NewProjectWizard.java

... пробиваясь через дебри кода удаляем внутрение кишки, связывающие компонент со средой ...
... полноценные SWT-классы заменяем их обрубками ...

И сразу всю получилось и генерация заработала!

Далее библиотеку вносим внутрь самого проекта.

Теперь цель создать GUI и облегчить ядро приложения.

Добавить полезную кнопку Random Color для генерации цвета.

Попробовать варианты создания разных GUI и выбрать что-либо одно:

NetBeans -- Похоже самый разумный выбор для построения GUI.
IntelliJ IDEA -- Для формы тянет свои дополнительные зависимости, поэтому не подходит.
JFormDesigner -- Отличный редактор, но платный. В бесплатной версии оставляет на форме свои копирайты.

Поэтому пришлось использовать NetBeans для построения формы и IntelliJ IDEA для написания кода.

Очень трудно создать нормальный GUI на устаревших технологиях, поскольку даже кросс-платформенные стили на разных платформах выглядят по-разному, в частности из-за разного набора шрифтов и метода их рендеринга. Самый адекватный Layout для проектирования GUI -- GridBagLayout.

Узнать больше про synchronized в Java и разобраться с ним.

Сделать ComboBox с выбором шрифта по этому примеру:
https://stackoverflow.com/questions/33903093/java-swing-popup-font-selection

Перенести таймер внутрь конструктора.
Проверить выбрасываемое исключение.

Сделать три новых окна: превью, клипарт, о программе.
Начать преобразование генератора.

Вычистить Util.java, ImageUtils.java, TextUtils.java и остальные.

Найти изображения, подходящие для клипарта.

Провести бенчмарк различных генераторов. Бенчмарк показал, что генератор не использующий сложные контейнеры вроде LinkedHashMap, быстрее примерно на 10%

Иконка для заголовка окна и About.

Подходящие цвета по цветную иконку: #414751.

Отцентрировать главное окно.

Теперь, когда всё необходимое реализовано, переходим к самому интересному и начинаем облегчать JAR-пакет.
  Начало: 3.5 МБ.
  Конец: 368 КБ.

Подготовить каталог doc/ и images/ с различными заметками и изображениями.

Проверить работу на Windows и пропатчить в случае необходимости.

Добавить ReadMe.md файл, скриншоты и залить программу на GitHub.
